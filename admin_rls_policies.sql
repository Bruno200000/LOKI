-- üõ°Ô∏è Politiques RLS (Row Level Security) pour AdminDashboard LOKI
-- Ces politiques permettent √† l'administrateur de lire toutes les donn√©es

-- =============================================
-- 1Ô∏è‚É£ PROFILS - Acc√®s complet pour les administrateurs
-- =============================================

-- Politique de lecture pour les profils (tous les r√¥les)
CREATE POLICY "Admin can view all profiles" ON public.profiles
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique d'insertion pour les profils (si n√©cessaire)
CREATE POLICY "Admin can insert profiles" ON public.profiles
FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de mise √† jour pour les profils
CREATE POLICY "Admin can update profiles" ON public.profiles
FOR UPDATE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de suppression pour les profils
CREATE POLICY "Admin can delete profiles" ON public.profiles
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- 2Ô∏è‚É£ R√âSERVATIONS - Acc√®s complet pour les administrateurs
-- =============================================

-- Politique de lecture pour les r√©servations
CREATE POLICY "Admin can view all bookings" ON public.bookings
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique d'insertion pour les r√©servations
CREATE POLICY "Admin can insert bookings" ON public.bookings
FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de mise √† jour pour les r√©servations
CREATE POLICY "Admin can update bookings" ON public.bookings
FOR UPDATE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de suppression pour les r√©servations
CREATE POLICY "Admin can delete bookings" ON public.bookings
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- 3Ô∏è‚É£ MAISONS - Acc√®s complet pour les administrateurs
-- =============================================

-- Politique de lecture pour les maisons
CREATE POLICY "Admin can view all houses" ON public.houses
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique d'insertion pour les maisons
CREATE POLICY "Admin can insert houses" ON public.houses
FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de mise √† jour pour les maisons
CREATE POLICY "Admin can update houses" ON public.houses
FOR UPDATE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de suppression pour les maisons
CREATE POLICY "Admin can delete houses" ON public.houses
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- 4Ô∏è‚É£ PAIEMENTS - Acc√®s complet pour les administrateurs
-- =============================================

-- Politique de lecture pour les paiements
CREATE POLICY "Admin can view all payments" ON public.payments
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique d'insertion pour les paiements
CREATE POLICY "Admin can insert payments" ON public.payments
FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de mise √† jour pour les paiements
CREATE POLICY "Admin can update payments" ON public.payments
FOR UPDATE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de suppression pour les paiements
CREATE POLICY "Admin can delete payments" ON public.payments
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- 5Ô∏è‚É£ AVIS/REVIEWS - Acc√®s pour les administrateurs
-- =============================================

-- Politique de lecture pour les avis
CREATE POLICY "Admin can view all reviews" ON public.reviews
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Politique de suppression pour les avis (mod√©ration)
CREATE POLICY "Admin can delete reviews" ON public.reviews
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- 6Ô∏è‚É£ ACTIVATION/D√âSACTIVATION DES POLITIQUES
-- =============================================

-- Activer RLS sur toutes les tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.houses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reviews ENABLE ROW LEVEL SECURITY;

-- =============================================
-- 7Ô∏è‚É£ POLITIQUES POUR LES UTILISATEURS NORMAUX
-- =============================================

-- Les utilisateurs peuvent voir leur propre profil
CREATE POLICY "Users can view own profile" ON public.profiles
FOR SELECT
USING (id = auth.uid());

-- Les utilisateurs peuvent mettre √† jour leur propre profil
CREATE POLICY "Users can update own profile" ON public.profiles
FOR UPDATE
USING (id = auth.uid())
WITH CHECK (id = auth.uid());

-- Les propri√©taires peuvent voir leurs propres maisons
CREATE POLICY "Owners can view own houses" ON public.houses
FOR SELECT
USING (owner_id = auth.uid());

-- Les propri√©taires peuvent g√©rer leurs propres maisons
CREATE POLICY "Owners can manage own houses" ON public.houses
FOR ALL
USING (owner_id = auth.uid())
WITH CHECK (owner_id = auth.uid());

-- Les locataires et propri√©taires peuvent voir leurs r√©servations
CREATE POLICY "Users can view own bookings" ON public.bookings
FOR SELECT
USING (
  tenant_id = auth.uid() OR
  owner_id = auth.uid() OR
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- Les utilisateurs peuvent voir leurs paiements
CREATE POLICY "Users can view own payments" ON public.payments
FOR SELECT
USING (
  paid_by = auth.uid() OR
  paid_to = auth.uid() OR
  EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid()
    AND role = 'admin'
  )
);

-- =============================================
-- 8Ô∏è‚É£ V√âRIFICATION DES POLITIQUES
-- =============================================

-- V√©rifier que les politiques sont cr√©√©es
SELECT
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- =============================================
-- 9Ô∏è‚É£ COMMENTAIRES ET EXPLICATIONS
-- =============================================

/*
üìã EXPLICATIONS DES POLITIQUES :

1Ô∏è‚É£ ACC√àS ADMINISTRATEUR :
   - L'admin peut TOUT voir et TOUT modifier
   - V√©rification via : role = 'admin' dans profiles

2Ô∏è‚É£ ACC√àS PROPRI√âTAIRE :
   - Peut g√©rer ses propres maisons (owner_id = auth.uid())
   - Peut voir les r√©servations de ses maisons
   - Peut voir les paiements li√©s √† ses maisons

3Ô∏è‚É£ ACC√àS LOCATAIRE :
   - Peut voir son profil
   - Peut voir ses r√©servations
   - Peut voir ses paiements

4Ô∏è‚É£ S√âCURIT√â :
   - RLS activ√© sur toutes les tables sensibles
   - V√©rification d'identit√© via auth.uid()
   - Contr√¥le granulaire des permissions

üîê UTILISATION :
- Ex√©cutez ce script dans Supabase SQL Editor
- L'admin avec email katchabruno52@gmail.com aura acc√®s complet
- Les autres utilisateurs auront un acc√®s limit√© √† leurs donn√©es
*/
