-- üè† Script pour v√©rifier l'acc√®s aux noms des utilisateurs et maisons dans les r√©servations

-- =============================================
-- 1Ô∏è‚É£ V√©rifier les politiques RLS pour les r√©servations
-- =============================================

SELECT
  'üîê POLITIQUES RLS - BOOKINGS' as info,
  '' as details
UNION ALL
SELECT
  policyname,
  cmd || ' - ' || COALESCE(qual, 'ALL') as details
FROM pg_policies
WHERE schemaname = 'public'
AND tablename = 'bookings'
ORDER BY policyname;

-- =============================================
-- 2Ô∏è‚É£ V√©rifier les politiques RLS pour les profils
-- =============================================

SELECT
  'üîê POLITIQUES RLS - PROFILES' as info,
  '' as details
UNION ALL
SELECT
  policyname,
  cmd || ' - ' || COALESCE(qual, 'ALL') as details
FROM pg_policies
WHERE schemaname = 'public'
AND tablename = 'profiles'
ORDER BY policyname;

-- =============================================
-- 3Ô∏è‚É£ V√©rifier les politiques RLS pour les maisons
-- =============================================

SELECT
  'üîê POLITIQUES RLS - HOUSES' as info,
  '' as details
UNION ALL
SELECT
  policyname,
  cmd || ' - ' || COALESCE(qual, 'ALL') as details
FROM pg_policies
WHERE schemaname = 'public'
AND tablename = 'houses'
ORDER BY policyname;

-- =============================================
-- 4Ô∏è‚É£ Test d'acc√®s direct aux donn√©es
-- =============================================

-- Test des r√©servations
SELECT
  'üìä TEST - R√âSERVATIONS' as test,
  COUNT(*)::text || ' r√©servations trouv√©es' as result
FROM public.bookings;

-- Test des profils
SELECT
  'üìä TEST - PROFILS' as test,
  COUNT(*)::text || ' profils trouv√©s' as result
FROM public.profiles;

-- Test des maisons
SELECT
  'üìä TEST - MAISONS' as test,
  COUNT(*)::text || ' maisons trouv√©es' as result
FROM public.houses;

-- =============================================
-- 5Ô∏è‚É£ Test des jointures manuelles
-- =============================================

-- Test de r√©cup√©ration des donn√©es combin√©es
SELECT
  'üîó TEST - DONN√âES COMBIN√âES' as test,
  '' as details
UNION ALL
SELECT
  'Exemple r√©servation avec noms',
  'ID: ' || LEFT(b.id::text, 8) || ' | Locataire: ' || COALESCE(p1.full_name, LEFT(p1.id::text, 8)) ||
  ' | Propri√©taire: ' || COALESCE(p2.full_name, LEFT(p2.id::text, 8)) ||
  ' | Maison: ' || COALESCE(h.title, LEFT(h.id::text, 8))
FROM public.bookings b
LEFT JOIN public.profiles p1 ON p1.id = b.tenant_id
LEFT JOIN public.profiles p2 ON p2.id = b.owner_id
LEFT JOIN public.houses h ON h.id = b.house_id
ORDER BY b.created_at DESC
LIMIT 1;

-- =============================================
-- 6Ô∏è‚É£ Instructions pour l'utilisateur
-- =============================================

/*
üöÄ AM√âLIORATIONS APPORT√âES √Ä L'AFFICHAGE DES R√âSERVATIONS :

‚úÖ Nouvelles fonctionnalit√©s :
   - Affichage du nom du locataire au lieu de l'ID
   - Affichage du nom du propri√©taire au lieu de l'ID
   - Affichage du titre de la maison au lieu de l'ID
   - Fallback gracieux si les noms ne sont pas disponibles

‚úÖ Code modifi√© :
   - fetchBookingsWithNames() : R√©cup√®re les donn√©es avec jointures
   - Interface Booking mise √† jour avec les champs de jointures
   - Affichage conditionnel : nom si disponible, sinon ID tronqu√©

‚úÖ Structure du tableau am√©lior√©e :
   - Colonne "Maison" : Affiche le titre ou "Maison ID: xxx..."
   - Colonne "Locataire" : Affiche le nom ou "ID: xxx..."
   - Colonne "Propri√©taire" : Affiche le nom ou "ID: xxx..."
   - Labels informatifs pour clarifier le type d'information

üîß Pour que cela fonctionne :
1. Les politiques RLS doivent permettre l'acc√®s aux tables profiles et houses
2. Les utilisateurs et maisons doivent exister dans la base de donn√©es
3. Si les noms n'apparaissent pas, v√©rifiez les politiques RLS

Ex√©cutez ce script pour diagnostiquer les permissions et les donn√©es disponibles.
*/
