-- üõ†Ô∏è Correction pour l'affichage des r√©servations dans AdminDashboard
-- Ex√©cutez ce script si les r√©servations n'apparaissent pas

-- =============================================
-- 1Ô∏è‚É£ V√âRIFIER LES DONN√âES EXISTANTES
-- =============================================

-- Tester l'acc√®s aux r√©servations sans RLS
ALTER TABLE public.bookings DISABLE ROW LEVEL SECURITY;

SELECT
  'üìä DONN√âES DE R√âSERVATIONS' as info,
  COUNT(*)::text || ' r√©servations trouv√©es dans la base' as result
FROM public.bookings;

-- Afficher quelques exemples
SELECT
  'üè† EXEMPLES DE R√âSERVATIONS' as info,
  '' as details
UNION ALL
SELECT
  LEFT(id, 12) || '...',
  'Statut: ' || status || ' | Loyer: ' || monthly_rent || ' FCFA | Cr√©√©e: ' || created_at::date
FROM public.bookings
ORDER BY created_at DESC
LIMIT 3;

-- =============================================
-- 2Ô∏è‚É£ R√âACTIVER RLS AVEC POLITIQUES SIMPLIFI√âES
-- =============================================

ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- Supprimer les politiques existantes
DROP POLICY IF EXISTS "Admin can view all bookings" ON public.bookings;
DROP POLICY IF EXISTS "Users can view own bookings" ON public.bookings;
DROP POLICY IF EXISTS "bookings_auth_select" ON public.bookings;
DROP POLICY IF EXISTS "bookings_simple_access" ON public.bookings;
DROP POLICY IF EXISTS "allow_all_read" ON public.bookings;

-- Cr√©er des politiques permissives (temporaires)
CREATE POLICY "bookings_permissive_select" ON public.bookings
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "bookings_owner_access" ON public.bookings
FOR SELECT
TO authenticated
USING (
  tenant_id = auth.uid() OR
  owner_id = auth.uid()
);

-- =============================================
-- 3Ô∏è‚É£ TESTER L'ACC√àS
-- =============================================

-- Test avec les nouvelles politiques
SELECT
  '‚úÖ TEST AVEC POLITIQUES PERMISSIVES' as test,
  '' as details
UNION ALL
SELECT
  'R√©servations accessibles',
  COUNT(*)::text || ' r√©servations'
FROM public.bookings
UNION ALL
SELECT
  'Statuts',
  string_agg(DISTINCT status, ', ') || ' (' || COUNT(DISTINCT status)::text || ' types)'
FROM public.bookings;

-- =============================================
-- 4Ô∏è‚É£ V√âRIFICATION FINALE
-- =============================================

-- Afficher les politiques cr√©√©es
SELECT
  'üìã POLITIQUES RLS POUR BOOKINGS' as info,
  '' as details
UNION ALL
SELECT
  policyname,
  cmd || ' - ' || COALESCE(qual, 'ALL') as details
FROM pg_policies
WHERE schemaname = 'public'
AND tablename = 'bookings'
ORDER BY policyname;

-- =============================================
-- 5Ô∏è‚É£ RECOMMANDATIONS
-- =============================================

/*
üöÄ APR√àS AVOIR EX√âCUT√â CE SCRIPT :

1. Testez l'AdminDashboard :
   - Les r√©servations devraient maintenant s'afficher
   - V√©rifiez la console pour les logs de d√©bogage

2. Si √ßa fonctionne :
   - Les r√©servations appara√Ætront dans l'onglet "R√©servations"
   - Les statistiques se mettront √† jour automatiquement

3. Si √ßa ne fonctionne toujours pas :
   - V√©rifiez les logs dans la console du navigateur
   - Ex√©cutez `check_admin_data.sql` pour diagnostiquer

4. Pour plus de s√©curit√© (optionnel) :
   - Utilisez `setup_rls_quick.sql` pour des politiques plus restrictives
   - Mais testez d'abord que tout fonctionne avec ces politiques permissives

üîß Ce script corrige les probl√®mes d'acc√®s aux r√©servations !
*/
