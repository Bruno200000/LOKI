-- üîß Script pour permettre l'acc√®s aux noms dans les r√©servations AdminDashboard

-- =============================================
-- 1Ô∏è‚É£ V√©rifier et corriger les politiques RLS
-- =============================================

-- Temporairement d√©sactiver RLS pour diagnostic
ALTER TABLE public.profiles DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.houses DISABLE ROW LEVEL SECURITY;

-- Test rapide de l'acc√®s
SELECT
  '‚úÖ TEST SANS RLS' as test,
  '' as details
UNION ALL
SELECT
  'Profils accessibles',
  COUNT(*)::text || ' profils' as result
FROM public.profiles
UNION ALL
SELECT
  'Maisons accessibles',
  COUNT(*)::text || ' maisons' as result
FROM public.houses
UNION ALL
SELECT
  'R√©servations accessibles',
  COUNT(*)::text || ' r√©servations' as result
FROM public.bookings;

-- =============================================
-- 2Ô∏è‚É£ R√©activer RLS avec politiques permissives
-- =============================================

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.houses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- Supprimer les politiques existantes probl√©matiques
DROP POLICY IF EXISTS "profiles_auth_select" ON public.profiles;
DROP POLICY IF EXISTS "profiles_select_policy" ON public.profiles;
DROP POLICY IF EXISTS "houses_auth_select" ON public.houses;
DROP POLICY IF EXISTS "houses_select_policy" ON public.houses;
DROP POLICY IF EXISTS "bookings_permissive_select" ON public.bookings;

-- Cr√©er des politiques permissives simples
CREATE POLICY "profiles_permissive_read" ON public.profiles
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "houses_permissive_read" ON public.houses
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "bookings_permissive_read" ON public.bookings
FOR SELECT
TO authenticated
USING (true);

-- =============================================
-- 3Ô∏è‚É£ Test avec les nouvelles politiques
-- =============================================

SELECT
  'üîê TEST AVEC POLITIQUES PERMISSIVES' as test,
  '' as details
UNION ALL
SELECT
  'Profils accessibles',
  COUNT(*)::text || ' profils' as result
FROM public.profiles
UNION ALL
SELECT
  'Maisons accessibles',
  COUNT(*)::text || ' maisons' as result
FROM public.houses
UNION ALL
SELECT
  'R√©servations accessibles',
  COUNT(*)::text || ' r√©servations' as result
FROM public.bookings;

-- =============================================
-- 4Ô∏è‚É£ Test des jointures pour AdminDashboard
-- =============================================

-- Test de la requ√™te que utilise AdminDashboard
SELECT
  'üîó TEST JOINTURES ADMIN DASHBOARD' as test,
  '' as details
UNION ALL
SELECT
  'Jointure profiles (tenant_id)',
  COUNT(*)::text || ' correspondances trouv√©es' as result
FROM public.bookings b
LEFT JOIN public.profiles p ON p.id = b.tenant_id
UNION ALL
SELECT
  'Jointure profiles (owner_id)',
  COUNT(*)::text || ' correspondances trouv√©es' as result
FROM public.bookings b
LEFT JOIN public.profiles p ON p.id = b.owner_id
UNION ALL
SELECT
  'Jointure houses (house_id)',
  COUNT(*)::text || ' correspondances trouv√©es' as result
FROM public.bookings b
LEFT JOIN public.houses h ON h.id = b.house_id;

-- =============================================
-- 5Ô∏è‚É£ Afficher un exemple complet
-- =============================================

SELECT
  'üìã EXEMPLE R√âSERVATION COMPL√àTE' as info,
  '' as details
UNION ALL
SELECT
  'R√©servation: ' || LEFT(b.id::text, 8),
  'Locataire: ' || COALESCE(p1.full_name, LEFT(p1.id::text, 8)) ||
  ' | Propri√©taire: ' || COALESCE(p2.full_name, LEFT(p2.id::text, 8)) ||
  ' | Maison: ' || COALESCE(h.title, LEFT(h.id::text, 8)) ||
  ' | Statut: ' || b.status
FROM public.bookings b
LEFT JOIN public.profiles p1 ON p1.id = b.tenant_id
LEFT JOIN public.profiles p2 ON p2.id = b.owner_id
LEFT JOIN public.houses h ON h.id = b.house_id
ORDER BY b.created_at DESC
LIMIT 1;

-- =============================================
-- 6Ô∏è‚É£ Instructions finales
-- =============================================

/*
üöÄ CONFIGURATION TERMIN√âE :

‚úÖ Politiques RLS configur√©es :
   - profiles_permissive_read : Acc√®s en lecture aux profils
   - houses_permissive_read : Acc√®s en lecture aux maisons
   - bookings_permissive_read : Acc√®s en lecture aux r√©servations

‚úÖ Jointures fonctionnelles :
   - Les noms des locataires et propri√©taires s'afficheront
   - Les titres des maisons s'afficheront
   - Fallback vers les IDs si les noms ne sont pas disponibles

‚úÖ AdminDashboard am√©lior√© :
   - Affichage des noms au lieu des IDs
   - Interface plus user-friendly
   - Informations compl√®tes et lisibles

üîß Testez maintenant :
1. Actualisez la page AdminDashboard (F5)
2. Allez sur l'onglet "R√©servations"
3. Vous devriez voir les noms des utilisateurs et des maisons
4. Si les noms n'apparaissent pas, les IDs seront affich√©s √† la place

Ex√©cutez verify_bookings_names.sql pour diagnostiquer plus en d√©tail.
*/
